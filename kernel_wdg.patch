diff -rNu a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
--- a/drivers/watchdog/Kconfig	2014-09-04 22:06:06.000000000 -0700
+++ b/drivers/watchdog/Kconfig	2015-03-10 06:53:31.528175017 -0700
@@ -237,6 +237,14 @@
 	  To compile this driver as a module, choose M here: the
 	  module will be called mxs_wdt.
 
+config ZLG_WATCHDOG
+        tristate "zlg extern  watchdog"
+        help
+          Say Y here if to include support for the watchdog timer
+          for the extern zlg watchdog.
+          To compile this driver as a module, choose M here: the
+          module will be called zlg_wdt.
+
 config IOP_WATCHDOG
 	tristate "IOP Watchdog"
 	depends on PLAT_IOP
diff -rNu a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
--- a/drivers/watchdog/Makefile	2014-09-04 22:06:06.000000000 -0700
+++ b/drivers/watchdog/Makefile	2015-03-10 06:53:51.296175454 -0700
@@ -38,8 +38,9 @@
 obj-$(CONFIG_SA1100_WATCHDOG) += sa1100_wdt.o
 obj-$(CONFIG_MPCORE_WATCHDOG) += mpcore_wdt.o
 obj-$(CONFIG_EP93XX_WATCHDOG) += ep93xx_wdt.o
-obj-$(CONFIG_MXC_WATCHDOG)	+= mxc_wdt.o
+obj-$(CONFIG_MXC_WATCHDOG) += mxc_wdt.o
 obj-$(CONFIG_MXS_WATCHDOG) += mxs-wdt.o
+obj-$(CONFIG_ZLG_WATCHDOG) += zlg_wdg.o
 obj-$(CONFIG_PNX4008_WATCHDOG) += pnx4008_wdt.o
 obj-$(CONFIG_IOP_WATCHDOG) += iop_wdt.o
 obj-$(CONFIG_DAVINCI_WATCHDOG) += davinci_wdt.o
@@ -50,7 +51,6 @@
 obj-$(CONFIG_ADX_WATCHDOG) += adx_wdt.o
 obj-$(CONFIG_TS72XX_WATCHDOG) += ts72xx_wdt.o
 obj-$(CONFIG_IMX2_WDT) += imx2_wdt.o
-
 # AVR32 Architecture
 obj-$(CONFIG_AT32AP700X_WDT) += at32ap700x_wdt.o
 
diff -rNu a/drivers/watchdog/mxs-wdt.c b/drivers/watchdog/mxs-wdt.c
--- a/drivers/watchdog/mxs-wdt.c	2014-09-04 22:06:06.000000000 -0700
+++ b/drivers/watchdog/mxs-wdt.c	2015-03-10 06:51:21.636172147 -0700
@@ -29,7 +29,6 @@
 #define WDT_OK_TO_CLOSE		1
 
 #define WDOG_COUNTER_RATE	1000 /* 1 kHz clock */
-
 static unsigned long wdt_status;
 static int heartbeat = DEFAULT_HEARTBEAT;
 static unsigned long boot_status;
diff -rNu a/drivers/watchdog/zlg_wdg.c b/drivers/watchdog/zlg_wdg.c
--- a/drivers/watchdog/zlg_wdg.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/watchdog/zlg_wdg.c	2015-03-10 12:12:08.660597438 -0700
@@ -0,0 +1,92 @@
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+#include <linux/watchdog.h>
+#include <linux/platform_device.h>
+#include <linux/spinlock.h>
+#include <linux/uaccess.h>
+#include <linux/io.h>
+
+#include <mach/hardware.h>
+#include <mach/regs-rtc.h>
+#include <mach/pinctrl.h>
+#include <../arch/arm/mach-mx28/regs-pinctrl.h>
+#include <../arch/arm/mach-mx28/mx28_pins.h>
+
+#define CSIGNAL		0x000000ff
+#define CLONE_FS	0x00000200
+#define CLONE_SIGHAND	0x00000800
+
+extern void msleep(unsigned int msecs);
+
+static int feed_dog = 0;
+static int flag_end = 0;
+
+
+
+static int init_wdg_gpio(void)
+{
+	
+	if(gpio_request(MXS_PIN_TO_GPIO(PINID_GPMI_RDY1), NULL))
+	{
+		printk("wdg gpio error");
+		return -1;
+	}	
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_GPMI_RDY1), 0);
+	msleep(20);	
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_GPMI_RDY1), 1);
+	feed_dog = 0;
+	return 0;	
+}
+
+
+static void watchdog_feed(int timeout)
+{
+	unsigned long  expire,tick = 1000;
+	expire = jiffies + timeout;
+
+	/*
+	 * Check whether the transmitter is empty every 'char_time'.
+	 * 'timeout' / 'expire' give us the maximum amount of time
+	 * we wait.
+	 */
+	while (tick--) {
+		msleep(jiffies_to_msecs(10));
+		if (time_after(jiffies, expire))
+			break;
+	}
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_GPMI_RDY1), feed_dog);
+	feed_dog  = (feed_dog == 0 ? 1 : 0);
+}
+
+static int  watchdog_process(void * unused)
+{
+	for(;;)
+	{
+		if(flag_end == 1)
+			break;
+		watchdog_feed(100);
+	}
+	return 0;
+}
+
+
+static int __init zlg_wdt_init(void)
+{
+	int ret,pid;
+	
+	ret = init_wdg_gpio();	
+	if(ret)
+		return -1;
+	pid = kernel_thread(watchdog_process, NULL, CLONE_FS | CLONE_SIGHAND);
+	return 0;
+}
+
+//static void __exit zlg_wdt_exit(void)
+//{
+//	;
+//}
+
+subsys_initcall(zlg_wdt_init);
+//subsys_initcall(zlg_wdt_exit);
